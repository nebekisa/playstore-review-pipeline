# docker-compose.yml (Full, Corrected Version)
version: '3.8'

services:
  # --- PostgreSQL for Airflow Metadata ---
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_db_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
  init-sqlite-dir:
    image: busybox:latest # Lightweight image for simple tasks
    volumes:
      - sqlite_data:/app/database # Mount the volume
      - ./scripts/init_sqlite_dir.sh:/init_sqlite_dir.sh:ro
    command: ["/bin/sh", "/init_sqlite_dir.sh"]
    user: "root:root" #

  # --- Airflow Webserver ---
  airflow-webserver:
    build:
      context: . # Build context is the current directory (where docker-compose.yml is)
      dockerfile: Dockerfile.airflow # Use your custom Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      init-sqlite-dir: # ADD DEPENDENCY
        condition: service_completed_successfully # Wait for init to finish
    
    environment:
      # --- Core Airflow Configuration ---
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      DB_PATH: /app/database/reviews.db
      # --- SMTP Configuration for Email Alerts (if needed) ---
      # Note: Requires smtp.gmail.com access, app password, and correct network/Docker setup.
      # AIRFLOW__SMTP__SMTP_HOST: smtp.gmail.com
      # AIRFLOW__SMTP__SMTP_STARTTLS: 'True'
      # AIRFLOW__SMTP__SMTP_SSL: 'False'
      # AIRFLOW__SMTP__SMTP_USER: libekiger@gmail.com
      # AIRFLOW__SMTP__SMTP_PASSWORD: ggxlwpmgdgbiynus # KEEP THIS SECRET!
      # AIRFLOW__SMTP__SMTP_PORT: '587'
      # AIRFLOW__SMTP__FROM: libekiger@gmail.com
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      # --- Mount SQLite Data Volume ---
      # Shares the SQLite DB file between containers.
      # Ensure tasks inside containers use the path '/app/database/reviews.db'
      - sqlite_data:/app/database
      # --- Mount Project Code (Scraper/Processor) ---
      # Makes your local code available inside the Airflow containers.
      - ./scraper:/opt/airflow/scraper_code
      - ./processor:/opt/airflow/processor_code
    user: "50000:50000"
    ports:
      - "8081:8080" # Map host port 8081 to container port 8080
    command: webserver
    restart: always

  # --- Airflow Scheduler ---
  airflow-scheduler:
    build:
      context: . # Build context is the current directory (where docker-compose.yml is)
      dockerfile: Dockerfile.airflow # Use your custom Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      init-sqlite-dir: # ADD DEPENDENCY
        condition: service_completed_successfully # Wait for init to finish
    
    environment:
      # --- Core Airflow Configuration ---
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      DB_PATH: /app/database/reviews.db
      # --- SMTP Configuration for Email Alerts (if needed) ---
      # AIRFLOW__SMTP__SMTP_HOST: smtp.gmail.com
      # AIRFLOW__SMTP__SMTP_STARTTLS: 'True'
      # AIRFLOW__SMTP__SMTP_SSL: 'False'
      # AIRFLOW__SMTP__SMTP_USER: libekiger@gmail.com
      # AIRFLOW__SMTP__SMTP_PASSWORD: ggxlwpmgdgbiynus # KEEP THIS SECRET!
      # AIRFLOW__SMTP__SMTP_PORT: '587'
      # AIRFLOW__SMTP__FROM: libekiger@gmail.com
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - sqlite_data:/app/database # Share SQLite DB volume
      - ./scraper:/opt/airflow/scraper_code # Share Scraper code volume
      - ./processor:/opt/airflow/processor_code # Share Processor code volume
    user: "50000:50000"
    command: scheduler
    restart: always

  # --- Airflow Init (One-time setup) - SIMPLIFIED & CORRECTED ---
  airflow-init:
    build:
      context: . # Build context is the current directory (where docker-compose.yml is)
      dockerfile: Dockerfile.airflow # Use your custom Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      init-sqlite-dir: # ADD DEPENDENCY
        condition: service_completed_successfully # Wait for init to finish
    
    environment:
      # --- Core Connection & Init Configuration ---
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: '' # In production, generate a secure key
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false' # Don't load examples
      # --- Init Actions (Handled by Airflow's default entrypoint) ---
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin # CHANGE THIS FOR PRODUCTION!
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      # If you need shared data/code mounted for init, add it here too.
      - sqlite_data:/app/database
      - ./scraper:/opt/airflow/scraper_code
      - ./processor:/opt/airflow/processor_code
    user: "50000:50000"
    # --- Use Airflow's standard entrypoint which handles _AIRFLOW_* env vars ---
    # This should work correctly with Airflow 2.9.1 image
    # No need to override entrypoint/command manually anymore
    # The 'restart: "no"' ensures it only runs once.
    restart: "no" # Run only once
  # --- End of Airflow Init ---

# --- Define Volumes (Must be top-level) ---
volumes:
  postgres_db_volume:
  sqlite_data: # Volume for SQLite database file

# --- REMOVED INVALID ROOT-LEVEL ENVIRONMENT SECTION ---
# Environment variables must be defined within a specific service.
# The SMTP settings are already included in the webserver/scheduler services above.